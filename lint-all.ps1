#!/usr/bin/env pwsh
# Script de verificaci√≥n autom√°tica de linting para WP Cup√≥n WhatsApp
# Ejecuta PHPCS, ESLint y Stylelint en todo el proyecto

Write-Host "=== VERIFICACI√ìN AUTOM√ÅTICA DE LINTING ==="
Write-Host "Plugin: WP Cup√≥n WhatsApp"
Write-Host "Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
Write-Host ""

# Variables de configuraci√≥n
$projectRoot = $PSScriptRoot
$phpcsConfig = ".phpcs.xml"
$eslintConfig = ".eslintrc.js"
$stylelintConfig = ".stylelintrc.json"
$logFile = "lint-results.log"

# Funci√≥n para escribir en log
function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "[$timestamp] $Message" | Out-File -FilePath $logFile -Append
    Write-Host $Message
}

# Limpiar log anterior
if (Test-Path $logFile) {
    Remove-Item $logFile
}

Write-Log "Iniciando verificaci√≥n de linting..."

# Verificar si estamos en el directorio correcto
if (-not (Test-Path "wp-cupon-whatsapp.php")) {
    Write-Log "ERROR: No se encontr√≥ wp-cupon-whatsapp.php. Ejecute desde la ra√≠z del plugin."
    exit 1
}

# Contadores de errores
$phpcsErrors = 0
$eslintErrors = 0
$stylelintErrors = 0
$totalErrors = 0

# === VERIFICACI√ìN PHPCS ===
Write-Log ""
Write-Log "=== VERIFICANDO C√ìDIGO PHP CON PHPCS ==="

if (Test-Path $phpcsConfig) {
    Write-Log "Ejecutando PHPCS con configuraci√≥n: $phpcsConfig"
    
    # Verificar si phpcs est√° disponible
    $phpcsPath = $null
    if (Test-Path "vendor/bin/phpcs.bat") {
        $phpcsPath = "vendor/bin/phpcs.bat"
    } elseif (Get-Command phpcs -ErrorAction SilentlyContinue) {
        $phpcsPath = "phpcs"
    }
    
    if ($phpcsPath) {
        try {
            $phpcsOutput = & $phpcsPath --standard=$phpcsConfig --report=summary . 2>&1
            $phpcsExitCode = $LASTEXITCODE
            
            Write-Log "Salida PHPCS:"
            $phpcsOutput | ForEach-Object { Write-Log "  $_" }
            
            if ($phpcsExitCode -eq 0) {
                Write-Log "‚úÖ PHPCS: Sin errores encontrados"
            } else {
                $phpcsErrors = 1
                Write-Log "‚ùå PHPCS: Se encontraron errores (c√≥digo: $phpcsExitCode)"
            }
        } catch {
            Write-Log "‚ùå Error ejecutando PHPCS: $($_.Exception.Message)"
            $phpcsErrors = 1
        }
    } else {
        Write-Log "‚ö†Ô∏è  PHPCS no encontrado. Instale con: composer install"
        $phpcsErrors = 1
    }
} else {
    Write-Log "‚ö†Ô∏è  Configuraci√≥n PHPCS no encontrada: $phpcsConfig"
    $phpcsErrors = 1
}

# === VERIFICACI√ìN ESLINT ===
Write-Log ""
Write-Log "=== VERIFICANDO C√ìDIGO JAVASCRIPT CON ESLINT ==="

if (Test-Path $eslintConfig) {
    Write-Log "Ejecutando ESLint con configuraci√≥n: $eslintConfig"
    
    # Buscar archivos JavaScript
    $jsFiles = Get-ChildItem -Path . -Include "*.js" -Recurse | Where-Object { 
        $_.FullName -notmatch "node_modules" -and 
        $_.FullName -notmatch "vendor" -and
        $_.FullName -notmatch "\.min\.js$"
    }
    
    if ($jsFiles.Count -gt 0) {
        Write-Log "Archivos JavaScript encontrados: $($jsFiles.Count)"
        
        # Verificar si eslint est√° disponible
        $eslintPath = $null
        if (Test-Path "node_modules/.bin/eslint.cmd") {
            $eslintPath = "node_modules/.bin/eslint.cmd"
        } elseif (Get-Command eslint -ErrorAction SilentlyContinue) {
            $eslintPath = "eslint"
        }
        
        if ($eslintPath) {
            try {
                $jsFilesList = $jsFiles | ForEach-Object { $_.FullName }
                $eslintOutput = & $eslintPath $jsFilesList 2>&1
                $eslintExitCode = $LASTEXITCODE
                
                Write-Log "Salida ESLint:"
                $eslintOutput | ForEach-Object { Write-Log "  $_" }
                
                if ($eslintExitCode -eq 0) {
                    Write-Log "‚úÖ ESLint: Sin errores encontrados"
                } else {
                    $eslintErrors = 1
                    Write-Log "‚ùå ESLint: Se encontraron errores (c√≥digo: $eslintExitCode)"
                }
            } catch {
                Write-Log "‚ùå Error ejecutando ESLint: $($_.Exception.Message)"
                $eslintErrors = 1
            }
        } else {
            Write-Log "‚ö†Ô∏è  ESLint no encontrado. Instale con: npm install eslint"
            $eslintErrors = 1
        }
    } else {
        Write-Log "‚ÑπÔ∏è  No se encontraron archivos JavaScript para verificar"
    }
} else {
    Write-Log "‚ö†Ô∏è  Configuraci√≥n ESLint no encontrada: $eslintConfig"
    $eslintErrors = 1
}

# === VERIFICACI√ìN STYLELINT ===
Write-Log ""
Write-Log "=== VERIFICANDO C√ìDIGO CSS CON STYLELINT ==="

if (Test-Path $stylelintConfig) {
    Write-Log "Ejecutando Stylelint con configuraci√≥n: $stylelintConfig"
    
    # Buscar archivos CSS
    $cssFiles = Get-ChildItem -Path . -Include "*.css" -Recurse | Where-Object { 
        $_.FullName -notmatch "node_modules" -and 
        $_.FullName -notmatch "vendor" -and
        $_.FullName -notmatch "\.min\.css$"
    }
    
    if ($cssFiles.Count -gt 0) {
        Write-Log "Archivos CSS encontrados: $($cssFiles.Count)"
        
        # Verificar si stylelint est√° disponible
        $stylelintPath = $null
        if (Test-Path "node_modules/.bin/stylelint.cmd") {
            $stylelintPath = "node_modules/.bin/stylelint.cmd"
        } elseif (Get-Command stylelint -ErrorAction SilentlyContinue) {
            $stylelintPath = "stylelint"
        }
        
        if ($stylelintPath) {
            try {
                $cssFilesList = $cssFiles | ForEach-Object { $_.FullName }
                $stylelintOutput = & $stylelintPath $cssFilesList 2>&1
                $stylelintExitCode = $LASTEXITCODE
                
                Write-Log "Salida Stylelint:"
                $stylelintOutput | ForEach-Object { Write-Log "  $_" }
                
                if ($stylelintExitCode -eq 0) {
                    Write-Log "‚úÖ Stylelint: Sin errores encontrados"
                } else {
                    $stylelintErrors = 1
                    Write-Log "‚ùå Stylelint: Se encontraron errores (c√≥digo: $stylelintExitCode)"
                }
            } catch {
                Write-Log "‚ùå Error ejecutando Stylelint: $($_.Exception.Message)"
                $stylelintErrors = 1
            }
        } else {
            Write-Log "‚ö†Ô∏è  Stylelint no encontrado. Instale con: npm install stylelint"
            $stylelintErrors = 1
        }
    } else {
        Write-Log "‚ÑπÔ∏è  No se encontraron archivos CSS para verificar"
    }
} else {
    Write-Log "‚ö†Ô∏è  Configuraci√≥n Stylelint no encontrada: $stylelintConfig"
    $stylelintErrors = 1
}

# === RESUMEN FINAL ===
$totalErrors = $phpcsErrors + $eslintErrors + $stylelintErrors

Write-Log ""
Write-Log "=== RESUMEN DE VERIFICACI√ìN ==="
Write-Log "PHPCS (PHP): $(if ($phpcsErrors -eq 0) { '‚úÖ PAS√ì' } else { '‚ùå FALL√ì' })"
Write-Log "ESLint (JS): $(if ($eslintErrors -eq 0) { '‚úÖ PAS√ì' } else { '‚ùå FALL√ì' })"
Write-Log "Stylelint (CSS): $(if ($stylelintErrors -eq 0) { '‚úÖ PAS√ì' } else { '‚ùå FALL√ì' })"
Write-Log ""
Write-Log "Total de herramientas con errores: $totalErrors"

if ($totalErrors -eq 0) {
    Write-Log "üéâ ¬°TODAS LAS VERIFICACIONES PASARON!"
    Write-Log "El c√≥digo cumple con todos los est√°ndares de calidad."
    exit 0
} else {
    Write-Log "‚ö†Ô∏è  SE ENCONTRARON PROBLEMAS DE CALIDAD DE C√ìDIGO"
    Write-Log "Revise los errores anteriores y corrija antes de continuar."
    Write-Log "Log completo guardado en: $logFile"
    exit 1
}